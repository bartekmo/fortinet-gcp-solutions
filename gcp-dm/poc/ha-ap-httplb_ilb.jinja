{% set prefix = properties.prefix|default(env.deployment) %}
{% import "../utils/netcalc.jinja" as netcalc %}

resources:

{% for address in properties.publicIPs %}
- name: {{ prefix }}-{{ address.name }}
  type: compute.v1.globalAddress
  properties:
    description: Inbound Service IP
    ipVersion: IPV4
{% endfor %}

- name: Fortigate_Cluster_Basic
  type: ha-ap-sdn.jinja
  properties:
    prefix: {{ prefix }}
    region: {{ properties.region }}
    zones: {{ properties.zones }}
    instanceType: {{ properties.instanceType }}
    license: {{ properties.license }}
    version: {{ properties.version }}
    networks: {{ properties.networks }}
    serviceAccount: {{ properties.serviceAccount }}
    serialPortEnable: {{ properties.serialPortEnable }}
    {% if "6.4." in properties.version %}
    attachPublicIP: false
    {% endif %}
    routes: []
    fwConfig: |
      config system probe-response
        set mode http-probe
        set http-probe-value OK
      end
      config system interface
        edit port1
          set allowaccess probe-response
        next
        edit port2
          unset allowaccess
          set secondary-IP enable
          config secondaryip
            edit 1
            set ip $(ref.{{ prefix }}-ilb-route-fwdrule.IPAddress) 255.255.255.255
            set allowaccess probe-response
            next
          end
        next
      end
      config router static
        edit 5
          set dst 35.191.0.0/16
          set device port2
          set gateway {{ netcalc.getNthIp( properties.networks.internal.ipCidrRange, 0 )}}
        next
        edit 6
          set dst 130.211.0.0/22
          set device port2
          set gateway {{ netcalc.getNthIp( properties.networks.internal.ipCidrRange, 0 )}}
        next
        edit 7
          set dst 35.191.0.0/16
          set device port1
          set gateway {{ netcalc.getNthIp( properties.networks.external.ipCidrRange, 0 )}}
        next
        edit 8
          set dst 130.211.0.0/22
          set device port1
          set gateway {{ netcalc.getNthIp( properties.networks.external.ipCidrRange, 0 )}}
        next
      end
      {{ properties.fwConfig | indent(6) }}


{% for zoneindx in [0,1] %}
- name: {{ prefix }}-hagroup{{ zoneindx }}
  type: compute.v1.instanceGroup
  properties:
    zone: {{ properties.zones[ zoneindx ]}}
- name: {{ prefix }}-hagroup{{zoneindx}}-add
  action: gcp-types/compute-v1:compute.instanceGroups.addInstances
  metadata:
    runtimePolicy:
    - CREATE
  properties:
    zone: {{ properties.zones[ zoneindx ]}}
    instanceGroup: $(ref.{{ prefix }}-hagroup{{ zoneindx }}.name)
    instances:
    - instance: $(ref.{{ prefix }}-fgt{{ loop.index }}.selfLink)
- name: {{ prefix }}-hagroup{{zoneindx}}-setPort
  action: gcp-types/compute-v1:compute.instanceGroups.setNamedPorts
  metadata:
    runtimePolicy:
    - CREATE
  properties:
    zone: {{ properties.zones[ zoneindx ]}}
    instanceGroup: $(ref.{{ prefix }}-hagroup{{ zoneindx }}.name)
    namedPorts:
    - name: http
      port: 80
{% endfor %}

- name: {{ prefix }}-http8008-probe
  type: compute.v1.healthCheck
  properties:
    type: HTTP
    httpHealthCheck:
      port: 8008
      checkIntervalSec: 5
      timeoutSec: 3
      unhealthyThreshold: 2
      healthyThreshold: 1

{# ILB resources #}
- name: {{ prefix }}-ilb-bes
  type: compute.v1.regionBackendService
  properties:
    region: {{ properties.region }}
    loadBalancingScheme: INTERNAL
    network: {{ properties.networks.internal.vpc }}
    protocol: TCP
    healthChecks:
    - $(ref.{{ prefix }}-http8008-probe.selfLink)
    backends:
    - group: $(ref.{{ prefix }}-hagroup0.selfLink)
    - group: $(ref.{{ prefix }}-hagroup1.selfLink)

- name: {{ prefix }}-ilb-route-fwdrule
  type: compute.v1.forwardingRule
  properties:
    region: {{ properties.region }}
    loadBalancingScheme: INTERNAL
    IPAddress: {{ netcalc.getNthIp( properties.networks.internal.ipCidrRange, 3 )}}
    IPProtocol: TCP
    allPorts: true
    backendService: $(ref.{{ prefix }}-ilb-bes.selfLink)
    network: {{ properties.networks.internal.vpc }}
    subnetwork: {{ properties.networks.internal.subnet }}

{# ELB resources #}
- name: {{ prefix }}-elb-bes
  type: compute.v1.backendService
  properties:
    loadBalancingScheme: EXTERNAL
    protocol: HTTP
    portName: http
    port: 80
    connectionDraining:
      drainingTimeoutSec: 300
    enableCDN: false
    logConfig:
      enable: false
    healthChecks:
    - $(ref.{{ prefix }}-http8008-probe.selfLink)
    sessionAffinity: NONE
    timeoutSec: 30
    backends:
    - group: $(ref.{{ prefix }}-hagroup0.selfLink)
      balancingMode: RATE
      capacityScaler: 1
      maxRatePerInstance: 100000
    - group: $(ref.{{ prefix }}-hagroup1.selfLink)
      balancingMode: RATE
      capacityScaler: 1
      maxRatePerInstance: 100000

- name: {{ prefix }}-elb-urlmap
  type: compute.v1.urlMap
  properties:
    defaultService: $(ref.{{ prefix }}-elb-bes.selfLink)

- name: {{ prefix }}-elb-proxy
  type: compute.v1.targetHttpProxy
  properties:
    urlMap: $(ref.{{ prefix }}-elb-urlmap.selfLink)

{% for address in properties.publicIPs %}
- name: {{ prefix }}-elb-{{ address.name }}-fwdrule
  type: compute.v1.globalForwardingRule
  properties:
    IPAddress: $(ref.{{ prefix }}-{{ address.name }}.selfLink)
    loadBalancingScheme: EXTERNAL
    portRange: 80-80
    IPProtocol: TCP
    target: $(ref.{{ prefix }}-elb-proxy.selfLink)
{% endfor %}


{% for route in properties.routes %}
{% if "name" in route %}
- name: {{ prefix }}-{{ route.name }}
{% else %}
- name: {{ prefix }}-ilb-route-{{ loop.index0 }}
{% endif %}
  type: compute.v1.route
  properties:
    destRange: {{ route.destRange }}
    {% if "priority" in route %}
    priority: {{ route.priority }}
    {% endif %}
    network: {{ properties.networks.internal.vpc }}
    nextHopIlb: $(ref.{{ prefix }}-ilb-route-fwdrule.selfLink )
{% endfor %}

outputs:
- name: FGT1-mgmt-ip
  value: $(ref.Fortigate_Cluster_Basic.FGT1-mgmt-ip)
- name: FGT2-mgmt-ip
  value: $(ref.Fortigate_Cluster_Basic.FGT2-mgmt-ip)
- name: defaultPassword
  value: $(ref.Fortigate_Cluster_Basic.defaultPassword)
- name: Inbound_Service_Addresses
  value:
  {%- for address in properties.publicIPs %}
  - {{address.name}}: $(ref.{{ prefix }}-{{ address.name }}.address)
  {% endfor %}
